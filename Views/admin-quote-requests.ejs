<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Quote Requests - Admin</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <style>
    .notif-icon {
      font-size: 1.7rem;
      color: #dc3545;
      cursor: pointer;
      position: relative;
    }
    #notifBadge {
      position: absolute;
      top: -5px;
      right: -10px;
      background-color: red;
      color: white;
      font-size: 0.75rem;
      padding: 2px 6px;
      border-radius: 50%;
    }
    .msg-preview {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
      white-space: pre-wrap;
      max-width: 420px;
      max-height: 3.2em; /* ~2 lines */
    }
    pre#mmBody {
      white-space: pre-wrap;
      font-family: system-ui, -apple-system, "Segoe UI", Roboto, Arial, "Noto Sans", "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";
      margin: 0;
    }
  </style>
</head>
<body>
<%- include("partials/navbar") %>

<div class="container py-5">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="mb-0">üì¨ Quote Requests</h2>

    <div class="d-flex align-items-center gap-3">
      <!-- Quick filters -->
      <input id="searchInput" type="text" class="form-control form-control-sm" placeholder="Search name/service‚Ä¶">
      <div class="form-check form-switch d-flex align-items-center">
        <input class="form-check-input" type="checkbox" role="switch" id="hasMsgOnly">
        <label class="form-check-label ms-2" for="hasMsgOnly">With message only</label>
      </div>

      <!-- Notifications -->
      <div id="notifContainer">
        <span class="notif-icon">üîî<span id="notifBadge" class="d-none">0</span></span>
        <audio id="notifSound" src="/sounds/notification.mp3" preload="auto"></audio>
      </div>
    </div>
  </div>

  <!-- Toast -->
  <div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="quoteToast" class="toast align-items-center text-white bg-primary border-0" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="d-flex">
        <div class="toast-body">New quote request received! üéâ</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>
    </div>
  </div>

  <% if (!quotes || quotes.length === 0) { %>
    <div class="alert alert-info">No quote requests found.</div>
  <% } else { %>
    <div class="table-responsive">
      <table id="quotesTable" class="table table-bordered table-hover align-middle">
        <thead class="table-dark">
          <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Address</th>
            <th>Service</th>
            <th>Message</th>
            <th>Submitted</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          <% quotes.forEach(function(q){ %>
            <tr data-hasmsg="<%= (q.message && q.message.trim()) ? '1' : '0' %>">
              <td><%= q.name || "N/A" %></td>
              <td><%= q.email || "N/A" %></td>
              <td><%= q.phone || "N/A" %></td>
              <td><%= q.address || "N/A" %></td>
              <td><span class="badge bg-secondary"><%= q.paintType || "N/A" %></span></td>

              <td>
                <% if (q.message && q.message.trim()) { %>
                  <div class="msg-preview" title="<%= q.message %>"><%= q.message %></div>
                  <button
                    type="button"
                    class="btn btn-sm btn-outline-primary mt-1 view-msg-btn"
                    data-name="<%= q.name || '' %>"
                    data-service="<%= q.paintType || '' %>"
                    data-created="<%= q.createdAt ? new Date(q.createdAt).toLocaleString() : '' %>"
                    data-message="<%= encodeURIComponent(q.message) %>">
                    View
                  </button>
                <% } else { %>
                  <span class="badge bg-light text-muted">No message</span>
                <% } %>
              </td>

              <td><%= q.createdAt ? new Date(q.createdAt).toLocaleString() : "N/A" %></td>

              <td>
                <form action="/admin/delete-quote/<%= q._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this quote?');">
                  <button type="submit" class="btn btn-sm btn-danger">üóëÔ∏è Delete</button>
                </form>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  <% } %>
</div>

<!-- Message Modal -->
<div class="modal fade" id="messageModal" tabindex="-1" aria-labelledby="messageModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <div>
          <h5 class="modal-title" id="messageModalLabel">Customer Message</h5>
          <div class="small text-muted">
            <span id="mmName"></span> ‚Ä¢ <span id="mmService"></span> ‚Ä¢ <span id="mmCreated"></span>
          </div>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <pre id="mmBody"></pre>
      </div>
      <div class="modal-footer">
        <button id="copyMsgBtn" type="button" class="btn btn-outline-secondary">Copy message</button>
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  // Bootstrap JS fallback (if your footer doesn't load it)
  (function ensureBootstrap(){
    if (!window.bootstrap) {
      const s = document.createElement('script');
      s.src = 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js';
      document.body.appendChild(s);
    }
  })();

  // --- Notifications: bell, sound, toast ---
  const notifSound = document.getElementById("notifSound");
  const notifBadge = document.getElementById("notifBadge");
  const toastElement = document.getElementById("quoteToast");
  let unreadCount = 0;

  // WebSocket
  const socket = io();
  socket.on("newQuote", () => {
    unreadCount++;
    try { notifSound && notifSound.play(); } catch {}
    if (notifBadge) {
      notifBadge.innerText = unreadCount;
      notifBadge.classList.remove("d-none");
    }
    if (window.bootstrap && toastElement) {
      const toast = bootstrap.Toast.getOrCreateInstance(toastElement);
      toast.show();
    }
  });

  // Reset notifications when page loads
  window.addEventListener("DOMContentLoaded", () => {
    fetch("/admin/reset-notifications", { method: "POST" })
      .then(() => {
        unreadCount = 0;
        if (notifBadge) {
          notifBadge.innerText = "0";
          notifBadge.classList.add("d-none");
        }
      })
      .catch(err => console.error("‚ùå Failed to reset notifications", err));
  });

  // --- Message Modal population + programmatic open ---
  document.addEventListener("click", (e) => {
    const btn = e.target.closest(".view-msg-btn");
    if (!btn) return;

    // Header
    document.getElementById("mmName").textContent = btn.dataset.name || "";
    document.getElementById("mmService").textContent = btn.dataset.service || "";
    document.getElementById("mmCreated").textContent = btn.dataset.created || "";

    // Body
    const raw = btn.dataset.message ? decodeURIComponent(btn.dataset.message) : "";
    document.getElementById("mmBody").textContent = raw;

    // Show the modal (works even if no data-bs-* attributes)
    const modalEl = document.getElementById("messageModal");
    if (window.bootstrap && modalEl) {
      const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
      modal.show();
    } else {
      // fallback: load bootstrap then open
      const s = document.createElement('script');
      s.src = 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js';
      s.onload = () => bootstrap.Modal.getOrCreateInstance(modalEl).show();
      document.body.appendChild(s);
    }
  });

  // Copy full message
  document.getElementById("copyMsgBtn")?.addEventListener("click", async () => {
    const text = document.getElementById("mmBody").textContent || "";
    try {
      await navigator.clipboard.writeText(text);
      alert("Message copied to clipboard.");
    } catch (err) {
      console.error(err);
      alert("Could not copy. Select text and press Ctrl/Cmd + C.");
    }
  });

  // --- Filters (search + has message only) ---
  (function attachFilters(){
    const searchInput = document.getElementById("searchInput");
    const hasMsgOnly = document.getElementById("hasMsgOnly");
    const tbody = document.querySelector("#quotesTable tbody");
    if (!tbody) return;

    function applyFilters(){
      const q = (searchInput && searchInput.value ? searchInput.value : "").toLowerCase();
      const requireMsg = !!(hasMsgOnly && hasMsgOnly.checked);

      Array.from(tbody.rows).forEach(tr => {
        const name = (tr.cells[0]?.innerText || "").toLowerCase();
        const svc  = (tr.cells[4]?.innerText || "").toLowerCase();
        const hasMsg = tr.getAttribute("data-hasmsg") === "1";

        const matchesText = !q || name.includes(q) || svc.includes(q);
        const matchesMsg  = !requireMsg || hasMsg;

        tr.style.display = (matchesText && matchesMsg) ? "" : "none";
      });
    }

    searchInput && searchInput.addEventListener("input", applyFilters);
    hasMsgOnly && hasMsgOnly.addEventListener("change", applyFilters);
  })();
</script>

<%- include("partials/footer") %>
</body>
</html>

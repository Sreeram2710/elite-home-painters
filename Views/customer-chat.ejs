<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Chat with Admin</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <style>
    body { background-color: #f8f9fa; }
    .chat-container {
      max-width: 800px;
      margin: 40px auto;
      background: #fff;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      display: flex;
      flex-direction: column;
      height: 80vh;
    }
    .chat-header {
      padding: 15px;
      background: #0d6efd;
      color: #fff;
      border-top-left-radius: 12px;
      border-top-right-radius: 12px;
      font-weight: bold;
    }
    .chat-messages {
      flex: 1;
      padding: 15px;
      overflow-y: auto;
      background: #f1f5f9;
    }
    .chat-message {
      margin-bottom: 12px;
      display: flex;
      flex-direction: column;
    }
    .chat-message .bubble {
      padding: 10px 14px;
      border-radius: 16px;
      max-width: 70%;
    }
    .chat-message.customer .bubble {
      align-self: flex-end;
      background: #0d6efd;
      color: #fff;
      border-bottom-right-radius: 4px;
    }
    .chat-message.admin .bubble {
      align-self: flex-start;
      background: #e9ecef;
      color: #000;
      border-bottom-left-radius: 4px;
    }
    .chat-input {
      padding: 10px;
      border-top: 1px solid #dee2e6;
      display: flex;
      gap: 10px;
    }
  </style>
</head>
<body>
  <%- include("partials/navbar") %>

  <div class="chat-container">
    <div class="chat-header">Chat with Admin</div>
    <div id="messages" class="chat-messages"></div>
    <div id="typing" class="px-3 small text-muted"></div>
    <form id="chatForm" class="chat-input" autocomplete="off">
      <input id="msg" class="form-control" placeholder="Type your message..." />
      <button class="btn btn-primary" type="submit">Send</button>
    </form>
  </div>

  <!-- ðŸ”” Ping sound -->
  <audio id="ping" src="/sounds/ping.mp3" preload="auto"></audio>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const customerId = "<%= customer?._id %>";
    const userId = "<%= customer?._id %>";
    const role = "customer";

    const $list = document.getElementById("messages");
    const $form = document.getElementById("chatForm");
    const $msg  = document.getElementById("msg");
    const $typing = document.getElementById("typing");
    const $ping = document.getElementById("ping");

    function escapeHtml(s){
      return String(s||"").replace(/[&<>"']/g,m=>({ "&":"&amp;","<":"&lt;", ">":"&gt;",'"':"&quot;","'":"&#039;" }[m]))
    }

    function addMessage(m) {
      const wrapper = document.createElement("div");
      wrapper.className = `chat-message ${m.fromRole}`;
      wrapper.innerHTML = `
        <div class="bubble">
          ${escapeHtml(m.body)}
          <div class="small opacity-75">${new Date(m.createdAt).toLocaleTimeString()}</div>
        </div>`;
      $list.appendChild(wrapper);
      $list.scrollTop = $list.scrollHeight;
    }

    // --- Ping sound helper ---
    function playPing() {
      try {
        $ping.pause();
        $ping.currentTime = 0;
        const p = $ping.play();
        if (p && typeof p.then === "function") p.catch(()=>{});
      } catch(e) {}
    }

    // Unlock audio after first interaction (required by browsers)
    let audioUnlocked = false;
    function unlockAudio() {
      if (audioUnlocked) return;
      $ping.muted = true;
      $ping.play().then(() => {
        $ping.pause();
        $ping.currentTime = 0;
        $ping.muted = false;
        audioUnlocked = true;
      }).catch(()=>{});
    }
    window.addEventListener("click", unlockAudio, { once: true });
    window.addEventListener("keydown", unlockAudio, { once: true });
    window.addEventListener("touchstart", unlockAudio, { once: true });

    const socket = io({ query: { userId, role } });

    // Load chat history
    fetch(`/chat/history/${customerId}`)
      .then(r=>r.json()).then(d=>{
        (d.messages||[]).forEach(addMessage);
        return fetch(`/chat/read/${customerId}`, { method:"POST" });
      });

    // Incoming message
    socket.on("chat:message", ({ message }) => {
      addMessage(message);
      if (message.fromRole === "admin") {
        playPing();   // ðŸ”” play sound
      }
    });

    socket.on("chat:typing", ({ fromRole, isTyping }) => {
      $typing.textContent = (fromRole === "admin" && isTyping) ? "Admin is typing..." : "";
    });

    // Send
    $form.addEventListener("submit", (e) => {
      e.preventDefault();
      const body = ($msg.value || "").trim();
      if (!body) return;
      socket.emit("chat:send", { customerId, body });
      $msg.value = "";
    });

    let typingTimer;
    $msg.addEventListener("input", () => {
      socket.emit("chat:typing", { customerId, isTyping: true });
      clearTimeout(typingTimer);
      typingTimer = setTimeout(() => socket.emit("chat:typing", { customerId, isTyping:false }), 800);
    });
  </script>
</body>
</html>
